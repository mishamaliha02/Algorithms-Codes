/*Summary of Merge Sort Algorithm
Merge Sort is a divide and conquer sorting algorithm that works as follows:
1.Divide: Recursively divide the array into two halves until each subarray contains only one element 
2.Conquer: Sort and merge the subarrays to form a sorted array
3.Merge: Combine the sorted subarrays in a way that maintains order.

Time Complexity:
a. Best Case: O(n log n)
b. Average Case: O(n log n)
c. Worst Case: O(n log n)
Space Complexity: O(n) (due to temporary arrays)*/

#include <iostream>
using namespace std;

// Merge function to combine two sorted subarrays
void merge(int arr[], int left, int mid, int right) {
    int n1 = mid - left + 1;  // Left subarray size
    int n2 = right - mid;     // Right subarray size

    int L[n1], R[n2];  // Temporary subarrays

    // Copy elements into L[] and R[]
    for (int i = 0; i < n1; i++)
        L[i] = arr[left + i];
    for (int j = 0; j < n2; j++)
        R[j] = arr[mid + 1 + j];

    int i = 0, j = 0, k = left;

    // Merge elements from L[] and R[]
    while (i < n1 && j < n2) {
        if (L[i] <= R[j]) {
            arr[k] = L[i];
            i++;
        } else {
            arr[k] = R[j];
            j++;
        }
        k++;
    }

    // Copy remaining elements from L[]
    while (i < n1) {
        arr[k] = L[i];
        i++;
        k++;
    }

    // Copy remaining elements from R[]
    while (j < n2) {
        arr[k] = R[j];
        j++;
        k++;
    }
}

// Recursive mergeSort function (Handles Pairwise Merging)
void mergeSort(int arr[], int left, int right) {
    if (left < right) {
        int mid = left + (right - left) / 2; // Find the middle point

        // Recursively split the array
        mergeSort(arr, left, mid);
        mergeSort(arr, mid + 1, right);

        // Merge the sorted halves (this is where pairwise merging happens)
        merge(arr, left, mid, right);
    }
}

// Function to print the array
void printArray(int arr[], int size) {
    for (int i = 0; i < size; i++)
        cout << arr[i] << " ";
    cout << endl;
}

// Main function
int main() {
    int arr[] = {12, 11, 13, 5, 6, 7};
    int size = sizeof(arr) / sizeof(arr[0]);

    cout << "Original array: ";
    printArray(arr, size);

    // Perform merge sort (including pairwise merging)
    mergeSort(arr, 0, size - 1);

    cout << "Sorted array: ";
    printArray(arr, size);

    return 0;
}





