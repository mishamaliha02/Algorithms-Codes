/*Summary of Merge Sort Algorithm
Merge Sort is a divide and conquer sorting algorithm that works as follows:
1.Divide: Recursively divide the array into two halves until each subarray contains only one element 
2.Conquer: Sort and merge the subarrays to form a sorted array
3.Merge: Combine the sorted subarrays in a way that maintains order.

Time Complexity:
a. Best Case: O(n log n)
b. Average Case: O(n log n)
c. Worst Case: O(n log n)
Space Complexity: O(n) (due to temporary arrays)*/

#include<iostream>
using namespace std;
void mergeSort(int arr[],int left,int right){  
if(left<right){
  int mid=left+(right-left)/2;
mergeSort(arr,left,right);    //recursively mergeSort hocce akhane
mergeSort(arr,mid+1,right);
merge(arr,left,mid,right);
}
}
void merge(int arr[],int left,int mid,int right){   // two sorted subarray merge korar code 
int n1=mid-left+1;
int n2= right+mid;
int L[n1],R[n2];
for(int i=0;i<n1;i++){
L[i]=arr[left+i];
}
for(int i=0;i<n2;i++){
R[i]=arr[mid+1+i];
}
int i=0,j=0,k=left;
while (i < n1 && j < n2) {
        if (L[i] <= R[j]) {
            arr[k] = L[i];
            i++;
        } else {
            arr[k] = R[j];
            j++;
        }
        k++;
    }

    // Copy the remaining elements of L[], if any
    while (i < n1) {
        arr[k] = L[i];
        i++;
        k++;
    }

    // Copy the remaining elements of R[], if any
    while (j < n2) {
        arr[k] = R[j];
        j++;
        k++;
    }
}
void printArray(int arr[], int size) {
    for (int i = 0; i < size; i++)
        cout << arr[i] << " ";
    cout << endl;
}

// Main function
int main() {
    int arr[] = {12, 11, 13, 5, 6, 7};
    int size = sizeof(arr) / sizeof(arr[0]);

    cout << "Original array: ";
    printArray(arr, size);

    mergeSort(arr, 0, size - 1);

    cout << "Sorted array: ";
    printArray(arr, size);

    return 0;
}





